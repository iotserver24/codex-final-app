name: Build and Release Xibe AI

on:
  push:
    branches: [main]
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., 1.0.6)"
        required: true
        default: "1.0.6"

permissions:
  contents: write

jobs:
  # All build jobs run in parallel simultaneously
  build-linux:
    runs-on: ubuntu-22.04
    timeout-minutes: 30
    strategy:
      matrix:
        # Build for both x64 and ARM64 architectures
        architecture: [x64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          
      - name: Configure npm for better optional dependency handling
        run: |
          npm config set fund false
          npm config set audit false
          npm config set legacy-peer-deps false

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3 dpkg fakeroot rpm
          # Skip rpm-build installation since we're disabling RPM package creation

      - name: Install dependencies
        run: |
          echo "Installing dependencies with optimized settings..."
          npm ci --no-audit --no-fund --prefer-offline --progress=false
          echo "Dependencies installed successfully"

      - name: Fix Rollup optional dependencies issue
        run: |
          echo "Fixing Rollup optional dependencies issue..."
          # Try to explicitly install the problematic optional dependency without full reinstall
          npm install @rollup/rollup-linux-x64-gnu --save-optional --no-audit --no-fund || echo "Could not install optional rollup dependency, will try alternative approach"
          # Verify rollup installation
          echo "Verifying rollup installation..."
          npm list @rollup/rollup-linux-x64-gnu || echo "Optional dependency not found, continuing with fallback..."

      - name: Verify build environment
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Platform: $(uname -a)"
          echo "Architecture: $(arch)"
          echo "Target architecture: ${{ matrix.architecture }}"
          echo "Available disk space: $(df -h .)"

      - name: Build for Linux
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
          # Enable both DEB and RPM building
          BUILD_DEB: "true"
          BUILD_RPM: "true"
          # Disable code signing for CI builds
          CSC_IDENTITY_AUTO_DISCOVERY: "false"
          # Ensure we're building for the correct platform and architecture
          FORGE_PLATFORM: "linux"
          FORGE_ARCH: "${{ matrix.architecture }}"
          # Suppress Vite CJS deprecation warning
          VITE_CJS_IGNORE_WARNING: "true"
        run: |
          echo "Starting Linux build for ${{ matrix.architecture }}..."
          echo "Current directory: $(pwd)"
          echo "Node modules exist: $(test -d node_modules && echo 'Yes' || echo 'No')"
          echo "Forge config exists: $(test -f forge.config.ts && echo 'Yes' || echo 'No')"
          # Check if forge.config.ts needs modification to disable RPM
          if [ -f forge.config.ts ]; then
            echo "Ensuring RPM maker is disabled in forge config..."
            # This is a simple check - the actual implementation might need to be more sophisticated
            grep -q "makers: \[\]" forge.config.ts || echo "RPM maker might be enabled, continuing anyway"
          fi
          # Use a more specific make command for Linux with architecture
          NODE_ENV=production npx electron-forge make --platform linux --arch ${{ matrix.architecture }} || {
            echo "First build attempt failed, trying with fresh dependencies..."
            rm -rf node_modules package-lock.json
            npm cache clean --force
            npm install --include=optional --no-audit --no-fund --prefer-offline
            npm install @rollup/rollup-linux-x64-gnu --save-optional --no-audit --no-fund || echo "Could not install optional rollup dependency, continuing..."
            NODE_ENV=production npx electron-forge make --platform linux --arch ${{ matrix.architecture }}
          }

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds-${{ matrix.architecture }}
          path: |
            out/make/zip/linux/${{ matrix.architecture }}/*.zip
            out/make/deb/${{ matrix.architecture }}/*.deb
            out/make/rpm/${{ matrix.architecture }}/*.rpm
          retention-days: 30

  build-macos:
    runs-on: macos-14
    timeout-minutes: 30
    strategy:
      matrix:
        # Build ONLY a universal macOS artifact
        architecture: [universal]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install macOS dependencies
        run: |
          xcode-select --install || true

      - name: Setup macOS-specific dependencies
        run: |
          # Ensure we have the right architecture support
          arch -x86_64 node --version || echo "x86_64 not available"
          arch -arm64 node --version || echo "arm64 not available"

      - name: Install dependencies
        run: |
          echo "Installing dependencies with optimized settings..."
          npm ci --no-audit --no-fund --prefer-offline --progress=false
          echo "Dependencies installed successfully"

      - name: Fix macOS dependencies
        run: |
          # Fix the rollup optional dependency issue
          rm -rf node_modules package-lock.json
          npm cache clean --force
          npm install

      - name: Build for macOS
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
          # Disable code signing for CI builds
          CSC_IDENTITY_AUTO_DISCOVERY: "false"
          # Ensure we're building for the correct architecture
          FORGE_ARCH: "${{ matrix.architecture }}"
        run: |
          echo "Building for macOS ${{ matrix.architecture }}..."
          if [ "${{ matrix.architecture }}" = "universal" ]; then
            # For universal build, we need to build both architectures and combine them
            echo "Building universal macOS binary..."
            npx electron-forge make --platform darwin --arch x64,arm64
          else
            npx electron-forge make --platform darwin --arch ${{ matrix.architecture }}
          fi

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds-${{ matrix.architecture }}
          path: |
            out/make/zip/darwin/${{ matrix.architecture }}/*.zip
            out/make/zip/darwin/universal/*.zip
          retention-days: 30

  build-windows:
    runs-on: windows-2025 
    timeout-minutes: 30
    strategy:
      matrix:
        # Build for both x64 and ARM64 architectures
        architecture: [x64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: |
          echo "Installing dependencies with optimized settings..."
          npm ci --no-audit --no-fund --prefer-offline --progress=false
          echo "Dependencies installed successfully"

      - name: Build for Windows
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
          # Ensure we're building for the correct architecture
          FORGE_ARCH: "${{ matrix.architecture }}"
        run: |
          echo "Building for Windows ${{ matrix.architecture }}..."
          npx electron-forge make --platform win32 --arch ${{ matrix.architecture }}

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds-${{ matrix.architecture }}
          path: |
            out/make/squirrel.windows/${{ matrix.architecture }}/*.exe
            out/make/zip/win32/${{ matrix.architecture }}/*.zip
          retention-days: 30

  # Release job waits for ALL builds to complete
  create-release:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    if: always() # Run even if some builds fail
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version || '1.0.6' }}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
        continue-on-error: true

      - name: List all artifacts
        run: |
          echo "=== All downloaded artifacts ==="
          find artifacts/ -type f -name "*.exe" -o -name "*.zip" -o -name "*.dmg" -o -name "*.deb" || echo "No artifacts found"
          echo "=== Artifact details ==="
          ls -la artifacts/ || echo "No artifacts"

      - name: Rename artifacts with descriptive names
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          echo "Renaming artifacts for version $VERSION..."
          
          # Create a new directory for renamed artifacts
          mkdir -p renamed-artifacts
          
          # Linux artifacts
          if [ -d "artifacts/linux-builds-x64" ]; then
            find artifacts/linux-builds-x64 -name "*.deb" -exec cp {} "renamed-artifacts/Xibe AI-${VERSION}-Linux-x64.deb" \;
            find artifacts/linux-builds-x64 -name "*.zip" -exec cp {} "renamed-artifacts/Xibe AI-${VERSION}-Linux-x64.zip" \;
            find artifacts/linux-builds-x64 -name "*.rpm" -exec cp {} "renamed-artifacts/Xibe AI-${VERSION}-Linux-x64.rpm" \;
          fi
          
          if [ -d "artifacts/linux-builds-arm64" ]; then
            find artifacts/linux-builds-arm64 -name "*.deb" -exec cp {} "renamed-artifacts/Xibe AI-${VERSION}-Linux-ARM64.deb" \;
            find artifacts/linux-builds-arm64 -name "*.zip" -exec cp {} "renamed-artifacts/Xibe AI-${VERSION}-Linux-ARM64.zip" \;
            find artifacts/linux-builds-arm64 -name "*.rpm" -exec cp {} "renamed-artifacts/Xibe AI-${VERSION}-Linux-ARM64.rpm" \;
          fi
          
          # macOS artifacts
          if [ -d "artifacts/macos-builds-x64" ]; then
            find artifacts/macos-builds-x64 -name "*.zip" -exec cp {} "renamed-artifacts/Xibe AI-${VERSION}-macOS-x64.zip" \;
          fi
          
          if [ -d "artifacts/macos-builds-arm64" ]; then
            find artifacts/macos-builds-arm64 -name "*.zip" -exec cp {} "renamed-artifacts/Xibe AI-${VERSION}-macOS-ARM64.zip" \;
          fi
          
          if [ -d "artifacts/macos-builds-universal" ]; then
            find artifacts/macos-builds-universal -name "*.zip" -exec cp {} "renamed-artifacts/Xibe AI-${VERSION}-macOS-Universal.zip" \;
          fi
          
          # Windows artifacts
          if [ -d "artifacts/windows-builds-x64" ]; then
            find artifacts/windows-builds-x64 -name "*.exe" -exec cp {} "renamed-artifacts/Xibe AI-${VERSION}-Windows-x64-Setup.exe" \;
            find artifacts/windows-builds-x64 -name "*.zip" -exec cp {} "renamed-artifacts/Xibe AI-${VERSION}-Windows-x64-Portable.zip" \;
          fi
          
          if [ -d "artifacts/windows-builds-arm64" ]; then
            find artifacts/windows-builds-arm64 -name "*.exe" -exec cp {} "renamed-artifacts/Xibe AI-${VERSION}-Windows-ARM64-Setup.exe" \;
            find artifacts/windows-builds-arm64 -name "*.zip" -exec cp {} "renamed-artifacts/Xibe AI-${VERSION}-Windows-ARM64-Portable.zip" \;
          fi
          
          echo "Renamed artifacts:"
          ls -la renamed-artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Xibe AI v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            renamed-artifacts/*.zip
            renamed-artifacts/*.deb
            renamed-artifacts/*.rpm
            renamed-artifacts/*.exe
          body: |
            ## Xibe AI v${{ steps.version.outputs.version }}

            ### 🚀 What's New
            - AI-powered code generation and editing
            - 50+ AI models support including GPT-5, Claude, and free models
            - Vercel integration for one-click deployment
            - Built-in terminal and development tools
            - Cross-platform support (Windows, macOS, Linux)

            ### 📦 Downloads

            **Windows:**
            - **Windows (x64) (User)**: Download the `.exe` installer for 64-bit Windows
            - **Windows (ARM64) (User)**: Download the `.exe` installer for ARM64 Windows
            - **Windows (x64) (Portable)**: Download the `.zip` file for portable use on 64-bit Windows
            - **Windows (ARM64) (Portable)**: Download the `.zip` file for portable use on ARM64 Windows

            **macOS:**
            - **Mac Universal**: Download the universal `.zip` file (works on both Intel and Apple Silicon)
            - **Mac (ARM64)**: Download the `.zip` file optimized for Apple Silicon Macs
            - **Mac (x64)**: Download the `.zip` file for Intel Macs

            **Linux:**
            - **Linux (x64)**: Download the `.zip` file for 64-bit Linux systems
            - **Linux (ARM64)**: Download the `.zip` file for ARM64 Linux systems
            - **Linux (x64) DEB**: Download the `.deb` package for Debian/Ubuntu 64-bit systems

            ### 🔧 Installation
            1. Download the appropriate file for your platform and architecture
            2. Run the installer or extract the zip file
            3. Launch Xibe AI and start coding with AI!

            ### ⚠️ Note
            These builds are not code-signed and may show security warnings. This is normal for open-source applications.

            ### 🐛 Bug Reports
            If you encounter any issues, please report them on our [GitHub Issues](https://github.com/iotserver24/codex/issues) page.

            ### 📚 Documentation
            Visit our [documentation](https://codex.anishkumar.tech/docs) for detailed guides and tutorials.

            ---
            *Built with ❤️ by the Xibe AI team*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Update version in package.json
  update-version:
    needs: [create-release]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Update version in package.json
        run: |
          VERSION=${{ github.event.inputs.version || '1.0.6' }}
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [ "$CURRENT_VERSION" != "$VERSION" ]; then
            npm version $VERSION --no-git-tag-version
            echo "Updated package.json from $CURRENT_VERSION to $VERSION"
          else
            echo "Version is already $VERSION, no update needed"
          fi

      - name: Commit and push version update
        run: |
          VERSION=${{ github.event.inputs.version || '1.0.6' }}
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          if [ "$CURRENT_VERSION" != "$VERSION" ]; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add package.json
            git commit -m "Bump version to $VERSION"
            git push
            echo "Committed and pushed version update to $VERSION"
          else
            echo "No version change needed, skipping commit"
          fi
